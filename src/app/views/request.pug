extends template

block append body
  style.
    #list-requests tr td {
      max-width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    #list-requests_filter {
      width: 50%;
      text-align: left;
    }
    #list-requests_filter input {
      width: 50%;
      margin-bottom: 0px;
      height: 2rem;
    }
    #list-requests_length {
      display: none;
    }
  if !request
    .page-header
      h1 Request is invalid
      .row#pending-message
        .col.s12.text-center
          h4 you will be redirected to index in 5s.
          .preloader-wrapper.big.active
            .spinner-layer.spinner-blue
              .circle-clipper.left
                .circle
              .gap-patch
                .circle
              .circle-clipper.right
                .circle
            .spinner-layer.spinner-red
              .circle-clipper.left
                .circle
              .gap-patch
                .circle
              .circle-clipper.right
                .circle
            .spinner-layer.spinner-yellow
              .circle-clipper.left
                .circle
              .gap-patch
                .circle
              .circle-clipper.right
                .circle
            .spinner-layer.spinner-green
              .circle-clipper.left
                .circle
              .gap-patch
                .circle
              .circle-clipper.right
                .circle
      script
        :coffee-script
          $ ->
            setTimeout( ->
              rootPath = $("#root-straw-manager").attr("href")
              window.location.href = rootPath
            , 5000)
  else
    if request.data.libelles
      .col.s12.request
        a.green.lighten-1(href=request.url)= request.data.libelles.join("\t")
    
    ul.collapsible.grey.lighten-4(style="top:0px;position:sticky;z-index:1;", data-collapsible="expandable")
      li
        .collapsible-header.active General informations
        .collapsible-body.col.s12.request
          .row
            .col.s1 ID:
            .col.s11.request-view(data-id=request.requestID)= request.requestID
          .row
            .col.s1 Status:
              if request.status === 'failed'
                - classes_status = "red lighten-1 grey-text text-lighten-5"
              else if request.status === 'pending' || request.status === 'partial_pending'
                - classes_status = "orange lighten-1 grey-text text-lighten-5"
              else if request.status === 'set'
                - classes_status = "green lighten-1 grey-text text-lighten-5"
              else
                - classes_status = "grey darken-1 grey-text text-lighten-5"
            .col.s3
              span(style="padding:3px;", class=classes_status) #{request.status}
          .row
            .col.s1 Url:
            .col.s11
              a.blue-text(href=request.url)= request.url
          if request.parameters
            .row
              .col.s1 Params:
              .col.s11
                each value, param in request.parameters
                  if param == "wait"
                    if request.parameters['change-wait'] && request.parameters['change-wait'] !== "on"
                    else if request.parameters['change-wait'] && value
                      a.chip(style="margin-right: 3px;")= param + '=' + value
                  else if value != undefined
                    a.chip(style="margin-right: 3px;")= param + '=' + value
          .row
            .col.s1 Kept pages:
            .col.s11
              if request.pages && request.aspired_pages
                span= JSON.stringify(request.aspired_pages) + ' pages / ' + JSON.stringify(request.pages.length + 1) + ' sources'
                if request.not_found_in_pages
                  span= '(Not in: ' + JSON.stringify(request.not_found_in_pages.length) + ')'
              else
                span all
          .row(style="margin-bottom: 0px;")
            .col.s1 Actions:
            .col.s11
              a.btn-floating.orange(href=rootPath + "api/request/export/" + request.requestID, style="display: inline-block;", title="Export")
                i.material-icons file_download
              if request.status !== "pending" && request.status !== "partial_pending" 
                a.btn-floating.red(href=rootPath + "drop/" + request.requestID, style="display: inline-block;", title="Delete")
                  i.material-icons delete
              else
                a.btn-floating.orange(href=rootPath + "api/cancel/" + request.requestID, style="display: inline-block;", title="Stop")
                  i.material-icons stop
      li
        .collapsible-header Details
        .collapsible-body
          .col-s6.m4= "Run at: " + new Date(request.requestDate).toISOString().slice(0, 19).replace('T', ' ')
          .col-s6.m4= "Done at: " + new Date(request.responseDate).toISOString().slice(0, 19).replace('T', ' ')
          .col-s6.m4.time-elapsed= "Elapsed time: "
          .row
            .col-s12
              ul.collection.with-header#datas
                li.collection-header
                  h4 Datas
                each val, index in request.data
                  li.collection-item
                    .col-s6.m4= index
                    .col-s6.m4= val
    .col.s12
      ul.request-errors.collapsible.red.lighten-2.grey-text.text-lighten-4(data-collapsible="accordion")
        if request.error
          li.error
            div.collapsible-header.red Error caught
            div.collapsible-body
              pre
                if request.error.toString() !== '[object Object]'
                  p= request.error.toString().replace(new RegExp(/\\n/, 'g'), "\n")
                else
                  p= JSON.stringify(request.error, "", 4)
      .row(style="position:relative")
        .col.s12(style="position: absolute; right: 0px; width:200px; top: -10px; height: 70px;")
          .fixed-action-btn.horizontal(style="position: absolute; top: 0; right: 24px;")
            .btn-floating.btn-large.red
              i.large.material-icons menu
            ul
              li
                a#export_with_filter.btn-floating.small.orange(href=rootPath + "api/request/export/" + request.requestID, style="display: inline-block;")
                  i.material-icons file_download
      .row(style='overflow: hidden;')
        .col.s12(style="margin:3px;")
          table#list-requests.mdl-data-table.bordered.striped.transparent(width="100%;table-layout:fixed;")
            thead.sticky
              tr
                - rows = request.pages_detail
                - columns = []
                if rows
                  each row in rows
                    each value, key in row
                      if key === "id" || key === "status"
                        th.mdl-data-table__cell--non-numeric(style="max-width:50px;word-wrap:break-word;")= key
                        - columns.push({data: key})
                      else if key != "title"
                        th.mdl-data-table__cell--non-numeric(style="max-width:200px;word-wrap:break-word;")= key
                        - columns.push({data: key})
                    - break
    script#request-var(type='application/json')= JSON.stringify(request)
    script.
      var refresh_time = #{refresh_time}
      var columns = !{JSON.stringify(columns)}
    script
      :coffee-script
        rootPath = $("#root-straw-manager").attr("href")
        request = JSON.parse(document.getElementById('request-var').innerHTML
          .replace(/&quot;/g, '"')
          .replace(/&gt;/g, '>')
          .replace(/&lt;/g, '<')
          .replace(/&amp;/g, '&'));
        table = $('#list-requests').DataTable({
          pageLength: 50,
          searching: true,
          scrollY: '265px',
          scrollCollapse: false,
          processing: true,
          sort: false,
          serverSide: true,
          ajax: (data, callback, settings) ->
            apiurl = "/api/request/" + request.requestID + "/details/" + (data.start)
            if data.search.value
              apiurl += "/" + data.search.value
            $.get(apiurl)
              .done((response) ->
                callback({
                  draw: response.draw,
                  data: response.pages_detail,
                  recordsTotal: response.aspired_pages,
                  recordsFiltered: if response.filtered_pages then response.filtered_pages else response.aspired_pages
                });
              )
          ,
          fixedHeader: {
            header: true
          },
          columns: columns,
          columnDefs: [
            {
              targets: [5],
              render: (data) ->
                return "<a href='" + data + "'>" + data + "</a>";
            },
            {
              targets: [1],
              render: (data, type, row) ->
                return "<a href='" + data + "'>" + row['title'] + "</a>";
            },
            {
              targets: [4],
              render: (data, type, row) ->
                if data >= 500
                  classes_status = "red lighten-1 grey-text text-lighten-5"
                else if data >= 400
                  classes_status = "orange lighten-1 grey-text text-lighten-5"
                else if data < 400
                  classes_status = "green lighten-1 grey-text text-lighten-5"
                else
                  classes_status = "grey darken-1 grey-text text-lighten-5"
                return "<div class='center-align " + classes_status +  "'>" + data + "</div>"
            }
          ]
        })
        $("#list-requests_filter input").on("change", ->
          $("#export_with_filter").attr("href", "/api/request/export/" + request.requestID + "/details/" + $(this).val())
        )
        if (!request.responseDate)
          request.responseDate = moment();
        $('.time-elapsed').text("Elapsed time: " + moment.duration(moment(request.requestDate).diff(moment(request.responseDate))).format("h [h] mm [min] ss [secs]"));
        decode = (request) ->
          if (!request.responseDate)
            request.responseDate = moment();
          $('.time-elapsed').text("Elapsed time: " + moment.duration(moment(request.requestDate).diff(moment(request.responseDate))).format("h [h] mm [min] ss [secs]"));
          $("#request-" + request.requestID + " span.badge").text(request.status)
          $("#datas").empty()
          if request.error && $(".error").length == 0
            errorElement= $("<li>", {
              class: "error"
            })
            $('.request-errors').append(errorElement);
            errorHeader = $("<div>", {
              "class": "collapsible-header"
            });
            errorElement.append(errorHeader);
            errorHeader.text("Error caught");
            errorBody = $("<div>", {
              "class": "collapsible-body"
            });

            errorElement.append(errorBody).append($("<pre>").text(JSON.stringify JSON.parse(request.error), null, 4));

          dataHeader = $("<li>", {
            class: "collection-header"
          });
          dataHeader.append($("<h4>", {
            text: "Datas"
          }))
          $("#datas").append(dataHeader);
          for data, value of request.data
            obj = $("<li>", {
              class: "collection-item row" 
            })
            obj.append($("<div>", {
              class: "col s6 m2 grey-text"
            }).text(data))
            obj.append($("<div>", {
              class: "col s6 m4"
            }).text(value))
            $("#datas").append(obj)
            
          if (request.status != "pending")
            $("#auto-refresh").removeClass("active")
        $ ->
          $('#auto-refresh').click ->
            $(this).toggleClass("active")
            refresh()
          callback = (response) -> 
            decode(response)
            auto_refresh = $("#auto-refresh").hasClass("active")
            if auto_refresh
              setTimeout(refresh, refresh_time)
          refresh = () -> 
            $.get rootPath + "api/request/" + $(".request-view").data('id'), callback
          refresh()
