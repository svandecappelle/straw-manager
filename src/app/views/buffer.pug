extends template
block body
  a#api-link(href= rootPath + "api/" + view)
  table#buffer.mdl-data-table.bordered.highlight(style='width: 100%;', cellspacing="0")
    thead
      tr.centered
        each column in schema
          th(style='text-align:center;')= column.data
    tbody
    tfoot
      tr
        each column in schema
          th(style='padding: 0; margin: 0; vertical-align: middle; text-align:center;')
            input.column-filter(type="text", style='width: 33%;')
  script.
    var refresh_time = #{refresh_time}
    var schema = !{JSON.stringify(schema)}
  script
    :coffee-script
      view = $("#api-link").attr("href")
      table = null
      calcDataTableHeight = () ->
        return Math.round($( document ).height() - 350)
      setStatus = (request) ->
        reload_callback = () ->
          "ok"
          table.rows().recalcHeight().draw();
        table.ajax.reload( reload_callback , false)  
      decode = (response) ->
        setStatus request for request in response
      $ ->
        #$('#buffer').height(calcDataTableHeight() + 'px');
        table = $('#buffer').DataTable({
          paging: true,
          "lengthMenu": [[100, -1], [100, "All"]]
          retrieve: true,
          searching: false,
          fixedHeader: {
            header: true
          },
          colReorder: {
            realtime: true
          },
          ajax: {url: view, dataSrc: ''}, 
          scrollY: calcDataTableHeight() + 'px',
          scrollCollapse: true,
          columns: schema,
          "columnDefs": [
            {
              "render": (data, type, row ) ->
                if (!data)
                  return "-";
                return moment(data).format('Do MMMM YYYY HH:mm:ss');
              ,
              "targets": [1, 2]
            },
            {
              "render": (data, type, row ) ->
                responseDate = row.responseDate;
                if (!row.responseDate)
                  responseDate = moment();
                return moment.duration(Math.abs(moment(row.requestDate).diff(moment(responseDate)))).format("h [h] mm [min] ss [secs]");
              ,
              "targets": [3]
            },
            {
              "render": (data, type, row) ->
                # url source
                return '<a href="' + row.url + '" onClick="event.stopPropagation(); Window.open(\'' + row.url + '\');">' + row.url + '</a>'
              ,
              "targets": [4]
            },
            {
              "render": (data, type, row ) ->
                # status
                if (data == "set")
                  color = "green";
                else if (data == "pending")
                  color = "amber";
                  data += '<div class="preloader-wrapper active" style="margin-left: 3px; vertical-align: middle; height: 16px; width: 16px"><div class="spinner-layer spinner-orange-only"><div class="circle-clipper left"><div class="circle"></div></div><div class="gap-patch"><div class="circle"></div></div><div class="circle-clipper right"><div class="circle"></div></div></div></div>'
                else if (data == "failed")
                  color = "red";
                return '<span class="chip ' + color + ' lighten-2">' + data + '</span>';
              ,
              "targets": [5]
            }
          ]
        });
        
        table.columns().every( () ->
          that = this
          $( 'input.column-filter', this.footer()).on( 'keyup change', () ->
            if ( this.value != that.search() )
              that.search( this.value ).draw()
          )
        )
        
        auto_refresh = $("#auto-refresh").is(':checked')
        $('#buffer tbody').on 'click', 'tr', ->
          data = table.row( this ).data()
          window.open("request/" + data.requestID, "_self")

        $('#auto-refresh').change -> 
          auto_refresh = $("#auto-refresh").is(':checked')
          if auto_refresh
            refresh()

        callback = (response) -> 
          decode(response)
          if auto_refresh
            setTimeout(refresh, refresh_time)

        refresh = () -> 
            $.get view, callback
        if auto_refresh
          refresh()
